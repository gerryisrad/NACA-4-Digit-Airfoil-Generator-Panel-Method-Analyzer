%% This script generates NACA 4 digits airfoil using the equations in 
% Chapter 1 Section 5.6
clc; close all; clear parameters; clear all; clear;
% Input Airfoil data ( remember NACA MPXX )
% M is the maximum camber divided by 100 (normalized by chord)
% P is the position of the maximum camber divide by 10 (normalized by chord)
% XX is the thickness divided by 100 (normalized by chord)
% Airfoil number
AirfoilAsk = 'Enter The Airfoil Number in Raw Vector as [x x x x]: ';
Airfoil = input(AirfoilAsk);
NACA = Airfoil;

% setting up the increments on the x-axis
% This will determine the approximation of the airfoil geometry
N=40;       % number of increments
Beta_max=pi; Beta_min=0;
d_Beta=(Beta_max-Beta_min)/(N-1);
Beta=Beta_min:d_Beta:Beta_max;
% Equation for x
x=(1-cos(Beta))/2;

Symm = 0;
% Output what type of airfoil
if length(NACA) == 4
    disp(['NACA 4 Digit Series: NACA ', num2str(NACA(1)), ...
        num2str(NACA(2)), num2str(NACA(3)), num2str(NACA(4))])
    
    if NACA(1) == 0 && NACA(2) == 0
        disp('Symmetric Airfoil')
    else
        Symm = 1;
        disp('Cambered Airfoil')
    end
end

% Airfoil equations
% Camber equations
% yc=M/P^2*(2*P*x-x.^2) and dyc_by_dx=2M/P^2*(P-x) when 0<x<P
% yc=M/(1-P)^2*(1-2*P+2*P*x-x.^2) and dyc_by_dx=2M/(1-P)^2*(P-x) when P<x<1
M = NACA(1)/100;
P = NACA(2)/10;
T = str2double([num2str(NACA(3)),num2str(NACA(4))])/100;
yc=(x<P).*(M/P^2.*(2.*P.*x-x.^2))+(x>=P).*(M/(1-P)^2.*(1-2*P+2.*P.*x-x.^2));
dyc_by_dx=(x<P).*(2*M/P^2.*(P-x))+(x>=P).*(2*M/(1-P)^2.*(P-x));

% Thickness equations
% yt=T/0.2*(a_0*x.^0.5+a_1*x+a_2*x.^2+a_3*x.^3+a_4*x.^4)
% values of coefficients
a_0=0.2969;
a_1=-0.126;
a_2=-0.3516;
a_3=0.2843;
a_4=-0.1015;
% yt=T/0.2*(a_0*x.^0.5+a_1*x+a_2*x.^2-a_3*x.^3+a_4*x.^4); % closed trailing edge
yt=T/0.2*(a_0.*x.^0.5+a_1.*x-a_2.*x.^2-a_3.*x.^3+a_4.*x.^4);

% Calculating the angle theta
theta=atan(dyc_by_dx);

% Calculating upper and lower surfaces
xu=x-yt.*sin(theta);
xl=x+yt.*sin(theta);
yu=yc+yt.*cos(theta);
yl=yc-yt.*cos(theta);

% Plots
figure(1)
hold on
grid on
% Plotting cambered airfoil
if Symm == 1
    plot(xu,yu,xl,yl,'LineWidth',1.5,'color','b')
    plot(x,yc,'--','LineWidth',1,'color','r')
    title(['NACA 4 Digit Series: NACA ', num2str(NACA(1)),...
        num2str(NACA(2)), num2str(NACA(3)), num2str(NACA(4))])
    xlabel('x/c')
    ylabel('y/c')
% Plotting symmetric airfoil
else
    xu=x;
    xl=x;
    yu=yt/2;
    yl=-yt/2;
    plot(xu,yu,xl,yl,'LineWidth',1.5,'color','b')
    plot(x,yc,'--','LineWidth',1,'color','r')
    title(['NACA 4 Digit Series: NACA ', num2str(NACA(1)),...
        num2str(NACA(2)), num2str(NACA(3)), num2str(NACA(4))])
    xlabel('x/c')
    ylabel('y/c')
end

% Save the variables on current folder for use
% with the source panel method
save('2412d','xl','xu','yl','yu')

%% This is the NACA 2412 offsets:
% Read the excel file where the panels have been identified.
% The Source_Panel function returns the N and T functions along with the
% n_hat and t_hat

%%
%clc; clear parameters; close all;clear all;clear;

% Reading airfoil data from a .mat file generated by
% NACA Generation code with N number of panels
load('2412d.mat')
xu = transpose(xu);
xl = transpose(xl);
yu = transpose(yu);
yl = transpose(yl);

% Manipulation of the data
% Data to be made into a single column vector
XP=[flip(xu);xl(2:end)]; YP=[flip(yu);yl(2:end)]; N = length(XP);

% Calling the panel source flow function
[AN,AT,XC,YC,NHAT,THAT] = Source_Panel(XP,YP,N);

% Setting the boundary conditions
uinfty = 1;
b=zeros(N,1);
for j=1:N
    b(j,1) = uinfty*NHAT(j,1);
end

% Solution of simultaneous algebraic equations
Sources = AN\b;
% Calculating tangential velocities
ut = AT*Sources - THAT(:,1);

% Coefficient of pressure
cp = 1 - ut.^2;

figure(2)
plot(XC(2:end-1),cp(2:end-1),'-ok',XP,YP,'b-')
hold on
plot(XC,YC,'r')
xlabel('x'),ylabel(' Cp ')
grid on;
title('NACA 4 Digit Series: NACA 2412 Pressure Distribution')
legend('Cp Distribution','Panel approximation','Control Points')


function [AN,AT,XC,YC,NHAT,THAT] = Source_Panel(XP,YP,N)
% Influence coefficients for source distribution over a symmetric body.
% AN is the Nij matrix and AT is the Tij matix in Eqn (51).
for J = 1:N
    if J==1
        XPL = XP(N);
        YPL = YP(N);
    else
        XPL = XP(J-1);
        YPL = YP(J-1);
    end
    XC(J) = 0.5*(XP(J) + XPL); % Panel Center Coordinates
    YC(J) = 0.5*(YP(J) + YPL);
    S(J) = sqrt( (XP(J) - XPL)^2 + (YP(J) - YPL)^2 ); % Panel length
    THAT(J,1) = (XP(J) - XPL)/S(J);
    THAT(J,2) = (YP(J) - YPL)/S(J);
    NHAT(J,1) = -THAT(J,2);
    NHAT(J,2) = THAT(J,1);
end

%Calculation of the influence coefficients.
for I = 1:N
    for J = 1:N
        if I==J
            AN(I,J) = pi;
            AT(I,J) = 0;
        else
            DX = XC(I) - XC(J);
            DY = YC(I) - YC(J);
            XQ = DX*THAT(J,1) + DY*THAT(J,2);
            YQ = DX*NHAT(J,1) + DY*NHAT(J,2);
            VX = -0.5*( log( (XQ + S(J)/2 )^2 + YQ*YQ ) ...
                -log( (XQ - S(J)/2 )^2 + YQ*YQ ) );
            VY = -( atan2( (XQ + S(J)/2),YQ) - atan2( (XQ - S(J)/2),YQ));
            NTIJ = 0;
            NNIJ = 0;
            TTIJ = 0;
            TNIJ = 0;
            for K = 1:2
                NTIJ = NHAT(I,K)*THAT(J,K) + NTIJ;
                NNIJ = NHAT(I,K)*NHAT(J,K) + NNIJ;
                TTIJ = THAT(I,K)*THAT(J,K) + TTIJ;
                TNIJ = THAT(I,K)*THAT(J,K) + TNIJ;
            end
            
            AN(I,J) = VX*NTIJ + VY*NNIJ;
            AT(I,J) = VX*TTIJ + VY*TNIJ;
        end
    end
end
end